#include <string>
#include <stdexcept>
#include <cuda_runtime.h>

template <typename ptrType>
class CudaResourceWrapper {
public:
    CudaResourceWrapper(size_t numEls);
    ~CudaResourceWrapper() {cudaFree(internalPointer); }

    ptrType * getPtr() {return internalPointer;}
    size_t getResSize() {return resourceSize;}
private:
    ptrType * internalPointer;
    size_t resourceSize;
    void operator=(CudaResourceWrapper b) {}
};

template <typename ptrType>
CudaResourceWrapper<ptrType>::CudaResourceWrapper (size_t numEls):
    resourceSize(numEls)
{
    cudaError_t cudaResult = cudaSuccess;
    cudaResult = cudaMalloc((void **) &internalPointer, numEls * sizeof(ptrType));

    if (cudaResult != cudaSuccess) {
	std::string msg = "Couldn't allocate device memory for resource: ";
	msg += cudaGetErrorString(cudaResult);
	throw std::runtime_error(msg);
    }  
}
